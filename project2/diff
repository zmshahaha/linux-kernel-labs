diff -u linux-5.17.1/fs/proc/base.c 1/fs/proc/base.c
--- linux-5.17.1/fs/proc/base.c	2022-03-28 16:03:22.000000000 +0800
+++ 1/fs/proc/base.c	2022-04-04 21:05:50.000000000 +0800
@@ -151,6 +151,12 @@
 		NULL, &proc_pid_attr_operations,	\
 		{ .lsm = LSM })
 
+static int proc_trace_ctx(struct seq_file *m, struct pid_namespace *ns,
+			      struct pid *pid, struct task_struct *task)
+{
+	seq_printf(m, "%u\n", task->ctx);
+	return 0;
+}
 /*
  * Count the number of hardlinks for the pid_entry table, excluding the .
  * and .. links.
@@ -3283,6 +3289,7 @@
 #ifdef CONFIG_PROC_PID_ARCH_STATUS
 	ONE("arch_status", S_IRUGO, proc_pid_arch_status),
 #endif
+	ONE("ctx",  S_IRUGO, proc_trace_ctx),
 #ifdef CONFIG_SECCOMP_CACHE_DEBUG
 	ONE("seccomp_cache", S_IRUSR, proc_pid_seccomp_cache),
 #endif
@@ -3616,6 +3623,7 @@
 #ifdef CONFIG_PROC_PID_ARCH_STATUS
 	ONE("arch_status", S_IRUGO, proc_pid_arch_status),
 #endif
+	ONE("ctx",  S_IRUGO, proc_trace_ctx),
 #ifdef CONFIG_SECCOMP_CACHE_DEBUG
 	ONE("seccomp_cache", S_IRUSR, proc_pid_seccomp_cache),
 #endif
 
 
 
 
diff -u linux-5.17.1/include/linux/sched.h 1/include/linux/sched.h
--- linux-5.17.1/include/linux/sched.h	2022-03-28 16:03:22.000000000 +0800
+++ 1/include/linux/sched.h	2022-04-04 21:05:50.000000000 +0800
@@ -1466,7 +1466,7 @@
 	unsigned long			lowest_stack;
 	unsigned long			prev_lowest_stack;
 #endif
-
+	int ctx;
 #ifdef CONFIG_X86_MCE
 	void __user			*mce_vaddr;
 	__u64				mce_kflags;
 	
 	
 	
 	
 diff -u linux-5.17.1/kernel/fork.c 1/kernel/fork.c
--- linux-5.17.1/kernel/fork.c	2022-03-28 16:03:22.000000000 +0800
+++ 1/kernel/fork.c	2022-04-04 21:05:50.000000000 +0800
@@ -2125,6 +2125,7 @@
 	p->sequential_io	= 0;
 	p->sequential_io_avg	= 0;
 #endif
+	p->ctx=0;
 #ifdef CONFIG_BPF_SYSCALL
 	RCU_INIT_POINTER(p->bpf_storage, NULL);
 	p->bpf_ctx = NULL;
 	
 	
 	
 	
diff -u linux-5.17.1/kernel/sched/core.c 1/kernel/sched/core.c
--- linux-5.17.1/kernel/sched/core.c	2022-03-28 16:03:22.000000000 +0800
+++ 1/kernel/sched/core.c	2022-04-04 21:05:50.000000000 +0800
@@ -6359,6 +6359,7 @@
 
 static void sched_update_worker(struct task_struct *tsk)
 {
+	tsk->ctx++;
 	if (tsk->flags & (PF_WQ_WORKER | PF_IO_WORKER)) {
 		if (tsk->flags & PF_WQ_WORKER)
 			wq_worker_running(tsk);

